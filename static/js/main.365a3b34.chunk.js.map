{"version":3,"sources":["store/types.ts","store/actions/index.ts","components/navigation/index.tsx","components/tracks/track/index.tsx","components/tracks/more/index.tsx","components/loading/index.tsx","components/tracks/index.tsx","components/message/index.tsx","pages/IndexPage.tsx","components/searchtracks/searchtracksitem/index.tsx","components/searchtracks/index.tsx","pages/SearchPage.tsx","components/artistinfo/index.tsx","pages/ArtistPage.tsx","App.tsx","store/reducers/tracksReducer.ts","store/reducers/actionsReducer.ts","store/reducers/artistReducer.ts","store/reducers/index.ts","store/store.ts","reportWebVitals.ts","index.tsx"],"names":["GET_TOP_TRACKS_FAILED","GET_ARTIST_INFO_FAILED","GET_SEARCH_TRACKS_FAILED","SEARCH_TRACKS_STATUS","GET_TOP_TRACKS","GET_ARTIST_INFO","GET_SEARCH_TRACKS","API_KEY","page","getArtistInfoFailed","message","type","getTopTracksFailed","getSearchTracksFailed","searchTracksStatus","status","getArtistInfoCurrent","artist","getSearchTracksCurrent","tracks","getTopTracks","dispatch","a","fetch","response","ok","json","track","Error","statusText","setTimeout","NavigationComponent","history","useHistory","Container","fluid","className","onClick","push","fontSize","TrackComponent","image","name","mbid","authorUrl","src","alt","data-artist","data-mbid","href","rel","target","title","MoreTracksComponent","useDispatch","LoadingComponent","Spinner","animation","role","variant","TracksComponent","topTracks","useSelector","state","trackKey","event","dataset","getArtistInfo","split","join","length","map","url","MessageComponent","text","Alert","IndexPage","topTracksFailed","actions","SearchTracksItemComponent","SearchTracksComponent","useState","searchInput","setSearchInput","search","searchStatus","searchKey","Form","onSubmit","preventDefault","Group","controlId","Label","Control","onChange","value","placeholder","Text","Button","trim","Number","results","trackmatches","SearchPage","searchTracksFailed","useEffect","ArtistInfoComponent","artistInfo","tagKey","tags","tag","dangerouslySetInnerHTML","__html","bio","content","ArtistPage","artistInfoFailed","undefined","App","basename","process","component","path","exact","initialState","tracksReducer","action","concat","actionsReducer","artistReducer","combineReducers","tracksReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","WithProvider","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.365a3b34.chunk.js","sourcesContent":["export const GET_TOP_TRACKS_FAILED = 'GET_TOP_TRACKS_FAILED';\r\nexport const GET_ARTIST_INFO_FAILED = 'GET_ARTIST_INFO_FAILED';\r\nexport const GET_SEARCH_TRACKS_FAILED = 'GET_SEARCH_TRACKS_FAILED';\r\nexport const SEARCH_TRACKS_STATUS = 'SEARCH_TRACKS_STATUS';\r\nexport const GET_TOP_TRACKS = 'GET_TOP_TRACKS';\r\nexport const GET_ARTIST_INFO = 'GET_ARTIST_INFO';\r\nexport const GET_SEARCH_TRACKS = 'GET_SEARCH_TRACKS';\r\n","import {\r\n    getTopTracksType,\r\n    topTracksType,\r\n    getArtistInfoType,\r\n    getSearchTracksType,\r\n    searchTracksType,\r\n} from '../../interfaces/interfaces';\r\nimport {\r\n    GET_TOP_TRACKS,\r\n    GET_TOP_TRACKS_FAILED,\r\n    GET_ARTIST_INFO,\r\n    GET_ARTIST_INFO_FAILED,\r\n    GET_SEARCH_TRACKS,\r\n    SEARCH_TRACKS_STATUS,\r\n    GET_SEARCH_TRACKS_FAILED,\r\n} from '../types';\r\n\r\nimport { ThunkAction } from 'redux-thunk';\r\n\r\nconst API_KEY = 'deb9c3028b400bea811320f3d9e46149';\r\nlet page = 1;\r\n\r\ntype getArtistInfoFailedActionType = {\r\n    type: typeof GET_ARTIST_INFO_FAILED;\r\n    message: string;\r\n};\r\n\r\ntype getTopTracksFailedActionType = {\r\n    type: typeof GET_TOP_TRACKS_FAILED;\r\n    message: string;\r\n};\r\n\r\ntype getSearchTracksFailedActionType = {\r\n    type: typeof GET_SEARCH_TRACKS_FAILED;\r\n    message: string;\r\n};\r\n\r\ntype searchTracksStatusActionType = {\r\n    type: typeof SEARCH_TRACKS_STATUS;\r\n    status: string;\r\n};\r\n\r\ntype getTopTracksCurrentActionType = {\r\n    type: typeof GET_TOP_TRACKS;\r\n    tracks: topTracksType[];\r\n};\r\n\r\ntype getArtistInfoCurrentActionType = {\r\n    type: typeof GET_ARTIST_INFO;\r\n    artist: getArtistInfoType;\r\n};\r\n\r\ntype getSearchTracksCurrentActionType = {\r\n    type: typeof GET_SEARCH_TRACKS;\r\n    tracks: searchTracksType[];\r\n};\r\n\r\nconst getArtistInfoFailed = (\r\n    message: string\r\n): getArtistInfoFailedActionType => {\r\n    return {\r\n        type: GET_ARTIST_INFO_FAILED,\r\n        message,\r\n    };\r\n};\r\n\r\nconst getTopTracksFailed = (message: string): getTopTracksFailedActionType => {\r\n    return {\r\n        type: GET_TOP_TRACKS_FAILED,\r\n        message,\r\n    };\r\n};\r\n\r\nconst getSearchTracksFailed = (\r\n    message: string\r\n): getSearchTracksFailedActionType => {\r\n    return {\r\n        type: GET_SEARCH_TRACKS_FAILED,\r\n        message,\r\n    };\r\n};\r\n\r\nexport const searchTracksStatus = (\r\n    status: string\r\n): searchTracksStatusActionType => {\r\n    return {\r\n        type: SEARCH_TRACKS_STATUS,\r\n        status,\r\n    };\r\n};\r\n\r\nconst getTopTracksCurrent = (\r\n    tracks: topTracksType[]\r\n): getTopTracksCurrentActionType => {\r\n    return {\r\n        type: GET_TOP_TRACKS,\r\n        tracks,\r\n    };\r\n};\r\n\r\nexport const getArtistInfoCurrent = (\r\n    artist: getArtistInfoType\r\n): getArtistInfoCurrentActionType => {\r\n    return {\r\n        type: GET_ARTIST_INFO,\r\n        artist,\r\n    };\r\n};\r\n\r\nexport const getSearchTracksCurrent = (\r\n    tracks: searchTracksType[]\r\n): getSearchTracksCurrentActionType => {\r\n    return {\r\n        type: GET_SEARCH_TRACKS,\r\n        tracks,\r\n    };\r\n};\r\n\r\nexport const getTopTracks = (): ThunkAction<\r\n    void,\r\n    unknown,\r\n    unknown,\r\n    ActionTypes\r\n> => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await fetch(\r\n                `http://ws.audioscrobbler.com/2.0/?method=chart.gettoptracks&api_key=${API_KEY}&page=${page}&format=json`\r\n            );\r\n\r\n            if (response.ok) {\r\n                try {\r\n                    const json: getTopTracksType = await response.json();\r\n\r\n                    dispatch(getTopTracksCurrent(json.tracks.track));\r\n                    dispatch(getTopTracksFailed(''));\r\n                    page++;\r\n                } catch (err) {\r\n                    throw new Error(\r\n                        `Incorrect data or server not responding, details: ${err.message}`\r\n                    );\r\n                }\r\n            } else {\r\n                throw new Error(\r\n                    `Error ${response.status}: ${response.statusText}`\r\n                );\r\n            }\r\n        } catch (err) {\r\n            dispatch(\r\n                getTopTracksFailed(`Failed to load tracks - \"${err.message}\"`)\r\n            );\r\n\r\n            setTimeout(() => {\r\n                dispatch(getTopTracksFailed(''));\r\n            }, 5500);\r\n        }\r\n    };\r\n};\r\n\r\nexport const getArtistInfo = (\r\n    mbid: string,\r\n    name: string\r\n): ThunkAction<void, unknown, unknown, ActionTypes> => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await fetch(\r\n                `http://ws.audioscrobbler.com/2.0/?method=artist.getinfo&mbid=${mbid}&artist=${name}&api_key=${API_KEY}&format=json`\r\n            );\r\n\r\n            if (response.ok) {\r\n                try {\r\n                    const json: getArtistInfoType = await response.json();\r\n\r\n                    if (json!.artist.name) {\r\n                        dispatch(getArtistInfoCurrent(json));\r\n                        dispatch(getArtistInfoFailed(''));\r\n                    } else {\r\n                        throw new Error('value not found');\r\n                    }\r\n                } catch (err) {\r\n                    throw new Error(\r\n                        `Incorrect data or server not responding, details: ${err.message}`\r\n                    );\r\n                }\r\n            } else {\r\n                throw new Error(\r\n                    `Error ${response.status}: ${response.statusText}`\r\n                );\r\n            }\r\n        } catch (err) {\r\n            dispatch(\r\n                getArtistInfoFailed(`Failed to load info - \"${err.message}\"`)\r\n            );\r\n\r\n            setTimeout(() => {\r\n                dispatch(getArtistInfoFailed(''));\r\n            }, 5500);\r\n        }\r\n    };\r\n};\r\n\r\nexport const getSearchTracks = (\r\n    track: string\r\n): ThunkAction<void, unknown, unknown, ActionTypes> => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await fetch(\r\n                `http://ws.audioscrobbler.com/2.0/?method=track.search&track=${track}&limit=10&api_key=${API_KEY}&format=json`\r\n            );\r\n\r\n            if (response.ok) {\r\n                try {\r\n                    const json: getSearchTracksType = await response.json();\r\n\r\n                    if (Number(json.results['opensearch:totalResults']) === 0) {\r\n                        dispatch(getSearchTracksCurrent([]));\r\n                        dispatch(searchTracksStatus('Tracks not found'));\r\n                        return;\r\n                    }\r\n\r\n                    const tracks = json.results.trackmatches.track;\r\n\r\n                    if (tracks[0].name) {\r\n                        dispatch(getSearchTracksCurrent(tracks));\r\n                        dispatch(searchTracksStatus('Enter track title'));\r\n                    } else {\r\n                        throw new Error('value not found');\r\n                    }\r\n                } catch (err) {\r\n                    throw new Error(\r\n                        `Incorrect data or server not responding, details: ${err.message}`\r\n                    );\r\n                }\r\n            } else {\r\n                throw new Error(\r\n                    `Error ${response.status}: ${response.statusText}`\r\n                );\r\n            }\r\n        } catch (err) {\r\n            dispatch(getSearchTracksFailed(`Search error - \"${err.message}\"`));\r\n            dispatch(searchTracksStatus('Error'));\r\n\r\n            setTimeout(() => {\r\n                dispatch(getSearchTracksFailed(''));\r\n            }, 5500);\r\n        }\r\n    };\r\n};\r\n\r\nexport type ActionTypes =\r\n    | getTopTracksCurrentActionType\r\n    | getTopTracksFailedActionType\r\n    | getArtistInfoCurrentActionType\r\n    | getArtistInfoFailedActionType\r\n    | getSearchTracksCurrentActionType\r\n    | searchTracksStatusActionType\r\n    | getSearchTracksFailedActionType;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nimport { Container } from 'react-bootstrap';\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport './navigation.scss';\r\n\r\nconst NavigationComponent: React.FunctionComponent = () => {\r\n    const history = useHistory();\r\n\r\n    const searchHandler = () => {\r\n        history.push('/search');\r\n    };\r\n\r\n    const homeHandler = () => {\r\n        history.push('/');\r\n    };\r\n\r\n    return (\r\n        <Container fluid className=\"navigation p-0\">\r\n            <nav className=\"navigation__body\">\r\n                <div className=\"navigation__logo\" onClick={homeHandler}>\r\n                    SUPER MUSIC\r\n                </div>\r\n                <div className=\"navigation__search\" onClick={searchHandler}>\r\n                    <SearchIcon fontSize=\"large\" />\r\n                </div>\r\n            </nav>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default NavigationComponent;\r\n","import React from 'react';\r\n\r\nimport './track.scss';\r\n\r\ntype propsType = {\r\n    image: string;\r\n    name: string;\r\n    artist: string;\r\n    authorUrl: string;\r\n    mbid: string;\r\n};\r\n\r\nconst TrackComponent: React.FunctionComponent<propsType> = ({\r\n    image,\r\n    name,\r\n    artist,\r\n    mbid,\r\n    authorUrl,\r\n}) => {\r\n    return (\r\n        <div className=\"track\">\r\n            <div className=\"track__image\">\r\n                <img src={image} alt=\"img\" />\r\n            </div>\r\n            <div className=\"track__body\">\r\n                <div className=\"track__header\">\r\n                    <div className=\"track__name\">{name}</div>\r\n                    <div\r\n                        className=\"track__artist\"\r\n                        data-artist={artist}\r\n                        data-mbid={mbid}\r\n                    >\r\n                        {artist}\r\n                    </div>\r\n                </div>\r\n                <a\r\n                    className=\"track__author-url\"\r\n                    href={authorUrl}\r\n                    rel=\"noreferrer\"\r\n                    target=\"_blank\"\r\n                    title={artist}\r\n                >\r\n                    Profile on Last.fm\r\n                </a>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TrackComponent;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { getTopTracks } from '../../../store/actions';\r\n\r\nimport './moretracks.scss';\r\n\r\nconst MoreTracksComponent: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const moreTracksHandler = () => {\r\n        dispatch(getTopTracks());\r\n    };\r\n\r\n    return (\r\n        <div className=\"more-tracks\">\r\n            <div className=\"more-tracks__button\" onClick={moreTracksHandler}>\r\n                More tracks\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MoreTracksComponent;\r\n","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nimport './loading.scss';\r\n\r\nconst LoadingComponent: React.FunctionComponent = () => {\r\n    return (\r\n        <div className=\"loading\">\r\n            <div className=\"loading__title\">\r\n                Please wait while the content is loaded\r\n                <div className=\"loading__subtitle\">Loading...</div>\r\n            </div>\r\n            <div className=\"loading__img\">\r\n                <Spinner animation=\"border\" role=\"status\" variant=\"light\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </Spinner>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingComponent;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\n\r\nimport { getArtistInfo } from '../../store/actions';\r\n\r\nimport './tracks.scss';\r\n\r\nimport { rootStateType } from '../../interfaces/interfaces';\r\n\r\nimport TrackComponent from './track';\r\nimport MoreTracksComponent from './more';\r\nimport LoadingComponent from '../loading';\r\n\r\ntype propsType = {\r\n    className?: string;\r\n};\r\n\r\nconst TracksComponent: React.FunctionComponent<propsType> = ({ className }) => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const topTracks = useSelector(\r\n        (state: rootStateType) => state.tracks.topTracks\r\n    );\r\n\r\n    const artistInfoHandler = (event: any) => {\r\n        const target = event.target;\r\n        const mbid: string | undefined = target.dataset.mbid;\r\n        const artist: string | undefined = target.dataset.artist;\r\n\r\n        if ((mbid === '' || mbid) && artist) {\r\n            dispatch(getArtistInfo(mbid, artist));\r\n            history.push(`/artist/${artist.split(' ').join('+')}`);\r\n        }\r\n    };\r\n\r\n    let trackKey = 0;\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={className ? `tracks ${className}` : `tracks`}\r\n                onClick={artistInfoHandler}\r\n            >\r\n                {!!topTracks.length ? (\r\n                    topTracks.map((track) => {\r\n                        return (\r\n                            <div className=\"tracks__body\" key={trackKey++}>\r\n                                <TrackComponent\r\n                                    name={track.name}\r\n                                    artist={track.artist.name}\r\n                                    mbid={track.artist.mbid}\r\n                                    image={track.image[2]['#text']}\r\n                                    authorUrl={track.artist.url}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <div className=\"tracks__loading\">\r\n                        <LoadingComponent />\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className=\"tracks-more\">\r\n                <MoreTracksComponent />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TracksComponent;\r\n","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nimport './message.scss';\r\n\r\ntype propsType = {\r\n    variant: string;\r\n    text: string;\r\n};\r\n\r\nconst MessageComponent: React.FunctionComponent<propsType> = ({\r\n    variant,\r\n    text,\r\n}) => {\r\n    return (\r\n        <div className=\"message\">\r\n            <Alert variant={variant}>{text}</Alert>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessageComponent;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport './index.scss';\r\n\r\nimport { rootStateType } from '../interfaces/interfaces';\r\n\r\nimport TracksComponent from '../components/tracks';\r\nimport MessageComponent from '../components/message';\r\n\r\nconst IndexPage: React.FunctionComponent = () => {\r\n    const topTracksFailed = useSelector(\r\n        (state: rootStateType) => state.actions.topTracksFailed\r\n    );\r\n\r\n    return (\r\n        <main className=\"index\">\r\n            {topTracksFailed && (\r\n                <MessageComponent variant=\"danger\" text={topTracksFailed} />\r\n            )}\r\n            <TracksComponent className=\"tracks_padding-top-50\" />\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default IndexPage;\r\n","import React from 'react';\r\n\r\nimport './searchtracksitem.scss';\r\n\r\ntype propsType = {\r\n    name: string;\r\n    artist: string;\r\n};\r\n\r\nconst SearchTracksItemComponent: React.FunctionComponent<propsType> = ({\r\n    name,\r\n    artist,\r\n}) => {\r\n    return (\r\n        <div className=\"search-tracks-item\">\r\n            <div className=\"search-tracks-item__body\">\r\n                <div className=\"search-tracks-item__name\">{name}</div>\r\n                <div className=\"search-tracks-item__artist\">{artist}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchTracksItemComponent;\r\n","import React, { useState } from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport './searchtracks.scss';\r\n\r\nimport { rootStateType } from '../../interfaces/interfaces';\r\n\r\nimport { getSearchTracks, searchTracksStatus } from '../../store/actions';\r\n\r\nimport SearchTracksItemComponent from './searchtracksitem';\r\n\r\ntype propsType = {\r\n    className?: string;\r\n};\r\n\r\nconst SearchTracksComponent: React.FunctionComponent<propsType> = ({\r\n    className,\r\n}) => {\r\n    const [searchInput, setSearchInput] = useState('');\r\n    const search = useSelector((state: rootStateType) => state.tracks.search);\r\n    const searchStatus = useSelector(\r\n        (state: rootStateType) => state.tracks.searchStatus\r\n    );\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    let searchKey = 1;\r\n\r\n    const inputHandler = (event: any) => {\r\n        setSearchInput(event.target.value);\r\n    };\r\n\r\n    const searchHandler = () => {\r\n        if (searchInput.trim().length < 3 || searchInput.trim() === '') {\r\n            dispatch(searchTracksStatus('Validation error'));\r\n            setSearchInput('');\r\n            return;\r\n        }\r\n\r\n        dispatch(getSearchTracks(searchInput));\r\n    };\r\n\r\n    const onSubmitHandler = (event: any) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                className ? `search-tracks ${className}` : 'search-tracks'\r\n            }\r\n        >\r\n            <div className=\"search-tracks__header\">\r\n                <div className=\"search-tracks__field\">\r\n                    <Form onSubmit={onSubmitHandler}>\r\n                        <Form.Group controlId=\"formSearch\">\r\n                            <Form.Label>Search tracks</Form.Label>\r\n                            <Form.Control\r\n                                onChange={inputHandler}\r\n                                value={searchInput}\r\n                                type=\"text\"\r\n                                placeholder=\"Name of the track\"\r\n                            />\r\n                            <Form.Text className=\"search-tracks__status\">\r\n                                {searchStatus}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </div>\r\n                <div className=\"search-tracks__button-box\">\r\n                    <Button\r\n                        onClick={searchHandler}\r\n                        variant=\"light\"\r\n                        className=\"search-tracks__button\"\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className=\"search-tracks__body\">\r\n                {!!search.length &&\r\n                    search.map((track) => {\r\n                        return (\r\n                            <SearchTracksItemComponent\r\n                                key={searchKey++}\r\n                                name={track.name}\r\n                                artist={track.artist}\r\n                            />\r\n                        );\r\n                    })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchTracksComponent;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport './search.scss';\r\n\r\nimport { rootStateType } from '../interfaces/interfaces';\r\n\r\nimport { getSearchTracksCurrent, searchTracksStatus } from '../store/actions';\r\n\r\nimport SearchTracksComponent from '../components/searchtracks';\r\nimport MessageComponent from '../components/message';\r\n\r\nconst SearchPage: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const searchTracksFailed = useSelector(\r\n        (state: rootStateType) => state.actions.searchTracksFailed\r\n    );\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(getSearchTracksCurrent([]));\r\n            dispatch(searchTracksStatus('Enter track title'));\r\n        };\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <main className=\"search\">\r\n            {searchTracksFailed && (\r\n                <MessageComponent variant=\"danger\" text={searchTracksFailed} />\r\n            )}\r\n            <SearchTracksComponent className=\"search-tracks_padding-top-50\" />\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default SearchPage;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport './artistinfo.scss';\r\n\r\nimport { rootStateType } from '../../interfaces/interfaces';\r\n\r\nimport LoadingComponent from '../loading';\r\n\r\ntype propsType = {\r\n    className?: string;\r\n};\r\n\r\nconst ArtistInfoComponent: React.FunctionComponent<propsType> = ({\r\n    className,\r\n}) => {\r\n    const artist = useSelector(\r\n        (state: rootStateType) => state.artist.artistInfo\r\n    );\r\n\r\n    let tagKey = 0;\r\n\r\n    return (\r\n        <div className={className ? `artist-info ${className}` : 'artist-info'}>\r\n            {artist ? (\r\n                <div className=\"artist-info__body\">\r\n                    <div className=\"artist-info__preview\">\r\n                        <div className=\"artist-info__img\">\r\n                            <img\r\n                                src={artist.artist.image[2]['#text']}\r\n                                alt=\"img\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"artist-info__header\">\r\n                            <div className=\"artist-info__name\">\r\n                                {artist.artist.name}\r\n                            </div>\r\n                            <div className=\"artist-info__tags\">\r\n                                {artist.artist.tags.tag.map((name) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={tagKey++}\r\n                                            className=\"artist-info__tag\"\r\n                                        >\r\n                                            {name.name}\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        className=\"artist-info__description\"\r\n                        dangerouslySetInnerHTML={{\r\n                            __html: artist.artist.bio.content,\r\n                        }}\r\n                    ></div>\r\n                </div>\r\n            ) : (\r\n                <div className=\"artist-info__loading\">\r\n                    <LoadingComponent />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ArtistInfoComponent;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport './artist.scss';\r\n\r\nimport { getArtistInfoCurrent } from '../store/actions';\r\n\r\nimport { rootStateType } from '../interfaces/interfaces';\r\n\r\nimport MessageComponent from '../components/message';\r\nimport ArtistInfoComponent from '../components/artistinfo';\r\n\r\nconst ArtistPage: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const artistInfoFailed = useSelector(\r\n        (state: rootStateType) => state.actions.artistInfoFailed\r\n    );\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(getArtistInfoCurrent(undefined));\r\n        };\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <main className=\"artist\">\r\n            {artistInfoFailed && (\r\n                <MessageComponent variant=\"warning\" text={artistInfoFailed} />\r\n            )}\r\n            <ArtistInfoComponent className=\"artist-info_padding-top-50\" />\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default ArtistPage;\r\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\n\nimport { getTopTracks } from './store/actions';\n\nimport './App.scss';\n\nimport NavigationComponent from './components/navigation';\nimport IndexPage from './pages/IndexPage';\nimport SearchPage from './pages/SearchPage';\nimport ArtistPage from './pages/ArtistPage';\n\nconst App: React.FunctionComponent = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getTopTracks());\n    }, [dispatch]);\n\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            <NavigationComponent />\n            <Container className=\"main\">\n                <Switch>\n                    <Route component={IndexPage} path=\"/\" exact />\n                    <Route component={SearchPage} path=\"/search\" />\n                    <Route component={ArtistPage} path=\"/artist/:artist\" />\n                </Switch>\n            </Container>\n        </Router>\n    );\n};\n\nexport default App;\n","import {\r\n    GET_TOP_TRACKS,\r\n    GET_SEARCH_TRACKS,\r\n    SEARCH_TRACKS_STATUS,\r\n} from '../types';\r\n\r\nimport { ActionTypes } from '../actions';\r\nimport { tracksStateType } from '../../interfaces/interfaces';\r\n\r\nconst initialState: tracksStateType = {\r\n    topTracks: [],\r\n    search: [],\r\n    searchStatus: 'Enter track title',\r\n};\r\n\r\nconst tracksReducer = (\r\n    state: tracksStateType = initialState,\r\n    action: ActionTypes\r\n) => {\r\n    switch (action.type) {\r\n        case GET_TOP_TRACKS: {\r\n            return {\r\n                ...state,\r\n                topTracks: state.topTracks.concat(action.tracks),\r\n            };\r\n        }\r\n\r\n        case GET_SEARCH_TRACKS: {\r\n            return {\r\n                ...state,\r\n                search: action.tracks,\r\n            };\r\n        }\r\n\r\n        case SEARCH_TRACKS_STATUS: {\r\n            return {\r\n                ...state,\r\n                searchStatus: action.status,\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default tracksReducer;\r\n","import {\r\n    GET_TOP_TRACKS_FAILED,\r\n    GET_ARTIST_INFO_FAILED,\r\n    GET_SEARCH_TRACKS_FAILED,\r\n} from '../types';\r\n\r\nimport { ActionTypes } from '../actions';\r\nimport { actionsStateType } from '../../interfaces/interfaces';\r\n\r\nconst initialState: actionsStateType = {\r\n    topTracksFailed: '',\r\n    artistInfoFailed: '',\r\n    searchTracksFailed: '',\r\n};\r\n\r\nconst actionsReducer = (\r\n    state: actionsStateType = initialState,\r\n    action: ActionTypes\r\n) => {\r\n    switch (action.type) {\r\n        case GET_TOP_TRACKS_FAILED: {\r\n            return {\r\n                ...state,\r\n                topTracksFailed: action.message,\r\n            };\r\n        }\r\n\r\n        case GET_ARTIST_INFO_FAILED: {\r\n            return {\r\n                ...state,\r\n                artistInfoFailed: action.message,\r\n            };\r\n        }\r\n\r\n        case GET_SEARCH_TRACKS_FAILED: {\r\n            return {\r\n                ...state,\r\n                searchTracksFailed: action.message,\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default actionsReducer;\r\n","import { GET_ARTIST_INFO } from '../types';\r\n\r\nimport { ActionTypes } from '../actions';\r\nimport { artistStateType } from '../../interfaces/interfaces';\r\n\r\nconst initialState: artistStateType = {\r\n    artistInfo: undefined,\r\n};\r\n\r\nconst artistReducer = (\r\n    state: artistStateType = initialState,\r\n    action: ActionTypes\r\n) => {\r\n    switch (action.type) {\r\n        case GET_ARTIST_INFO: {\r\n            return {\r\n                ...state,\r\n                artistInfo: action.artist,\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default artistReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport tracksReducers from './tracksReducer';\r\nimport actionsReducer from './actionsReducer';\r\nimport artistReducer from './artistReducer';\r\n\r\nexport default combineReducers({\r\n    tracks: tracksReducers,\r\n    actions: actionsReducer,\r\n    artist: artistReducer,\r\n});\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\n\nimport App from './App';\n\nimport store from './store/store';\nimport reportWebVitals from './reportWebVitals';\n\nconst WithProvider = (\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>\n);\n\nReactDOM.render(WithProvider, document.getElementById('super-music'));\n\nreportWebVitals();\n"],"sourceRoot":""}